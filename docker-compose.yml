version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ../ai-marketing-backend
      dockerfile: ../deployment/docker/Dockerfile.backend
    container_name: ai-marketing-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///data/marketing.db
      - CORS_ORIGINS=*
      - API_KEY=${API_KEY:-your-api-key-here}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    networks:
      - ai-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: ../ai-marketing-web
      dockerfile: ../deployment/docker/Dockerfile.frontend
    container_name: ai-marketing-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ../deployment/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ../deployment/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mobile App Service (Expo Web)
  mobile:
    build:
      context: ../ai-marketing-mobile
      dockerfile: ../deployment/docker/Dockerfile.mobile
    container_name: ai-marketing-mobile
    ports:
      - "19006:19006"
    depends_on:
      - backend
    networks:
      - ai-marketing-network
    restart: unless-stopped
    environment:
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0

  # Database Service (PostgreSQL for production)
  database:
    image: postgres:15-alpine
    container_name: ai-marketing-db
    environment:
      - POSTGRES_DB=ai_marketing
      - POSTGRES_USER=marketing_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../deployment/config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketing_user -d ai_marketing"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: ai-marketing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-marketing-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring:
    build:
      context: ../analytics-monitoring
      dockerfile: ../deployment/docker/Dockerfile.monitoring
    container_name: ai-marketing-monitoring
    ports:
      - "8080:8080"
    depends_on:
      - backend
      - database
    volumes:
      - monitoring_data:/app/data
      - monitoring_logs:/app/logs
    networks:
      - ai-marketing-network
    restart: unless-stopped
    environment:
      - MONITORING_INTERVAL=60
      - ALERT_EMAIL=${ALERT_EMAIL:-admin@ai-marketing-tools.com}

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-marketing-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - mobile
    networks:
      - ai-marketing-network
    restart: unless-stopped

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  monitoring_data:
    driver: local
  monitoring_logs:
    driver: local

networks:
  ai-marketing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

